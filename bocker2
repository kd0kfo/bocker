#!/bin/bash

set +x 

bocker2_path='/tmp/bocker2' && cgroups='cpu,cpuacct,memory';

if [[ -f "$HOME/.bocker2rc" ]];then
	. "$HOME/.bocker2rc"
fi

function bocker2_check() {
	if [[ -d "$1" ]];then
		echo 0
	else
		echo 1
	fi
}

function bocker2_path() {
	if [[ -z "$1" ]];then
		echo "Missing container name" >&2
		exit 1
	fi
	if [[ ! -d "$bocker2_path/$1" ]];then
		echo "No such container" >&2
		exit 2
	fi

	echo "$bocker2_path/$1"
}

function bocker2_du() {
	echo Base Size: $(du -hs $(cat $bocker2_path/$1/${1}.base) )
	echo Upper Size: $(du -hs $bocker2_path/$1/upper )
	echo Current Root Size: $(du -hs $bocker2_path/$1/root )
}

function bocker2_logs() {
	[[ "$(bocker2_check "$bocker2_path/$1")" == 1 ]] && echo "No container named '$1' exists" && exit 1
	cat "$bocker2_path/$1/$1.log"
}

function bocker2_rename() {
	currname="$1"
	newname="$2"

	currpath="$bocker2_path/$currname"
	newpath="$bocker2_path/$newname"

	if [[ ! -d "$currpath" ]];then
		echo "Missing container '$currname'" >&2
		exit 1
	fi

	if [[ -d "$newpath" ]];then
		echo "$newname already exists" >&2
		exit 2
	fi

	mv "$currpath" "$newpath"
	mv "$newpath/${currname}.base" "$newpath/${newname}.base"
	mv "$newpath/${currname}.cmd" "$newpath/${newname}.cmd"
	mv "$newpath/${currname}.log" "$newpath/${newname}.log"
		
	echo "[+] Moved $currname to $newname"
}

function bocker2_import() {
	archive="$(readlink -f $1)"
	uuid="ps_$(shuf -i 42002-42254 -n 1)"

	topdir="$bocker2_path/$uuid"

	if [[ -e "$topdir" ]];then
		echo "$topdir already exists" >&2
		exit 1
	fi

	mkdir -p "$topdir/upper"
	mkdir -p "$topdir/workdir"

	cd "$topdir"
	tar xzvf "$archive"
	   
	mv root base
	mkdir root
	echo "$PWD/base" > "${uuid}.base"

	echo Created $uuid
}

function bocker2_export() {
	uuid="$1"
	archive="$PWD/${uuid}.tgz"

	if [[ -z "$uuid" ]];then
		echo "Missing container name" >&2
		exit 1
	fi
	
	if [[ -e "$archive" ]];then
		echo "Archive already exists, not overwritting." >&2
		exit 2
	fi

	echo "[+] Mounting container filesystem"
	bocker2_mount $uuid

	cd $bocker2_path/$uuid
	tar czvf "$archive" root *.txt *.cmd

	echo "[+] Created archive at $archive"

	bocker2_umount $uuid

	echo "[+] Unmounted container"

}

function bocker2_rm() {
	if [[ -z "$1" ]];then
		echo "Missing container name" >&2
		exit 1
	fi
	container="$bocker2_path/$1"
	if [[ ! -d "$container" ]];then
		echo "No container at $container" >&2
		exit 2
	fi
	echo Press y to remove "$container"
	read response
	if [[ "$response" == "y" ]];then
		echo "Removed $container"
		rm -rf $container
		exit $?
	fi
	echo "Did not remove"
}

function bocker2_ps() {
	echo -e "CONTAINER_ID\t\tCOMMAND"
	for ps in "$bocker2_path"/*; do
		ps=$(basename "$ps")
		echo -e "$ps\t\t$(cat "$bocker2_path/$ps/$ps.cmd")"
	done
}

function bocker2_mount() {
	uuid="$1"
	imagedir="$(cat $bocker2_path/$uuid/$uuid.base)"
	mount -t overlay -oworkdir=$bocker2_path/$uuid/workdir,lowerdir=$imagedir,upperdir=$bocker2_path/$uuid/upper none $bocker2_path/$uuid/root
}

function bocker2_umount() {
	uuid="$1"
	umount "$bocker2_path/$uuid/root"
}

function bocker2_network_up() {
	ip l add bocker0 type bridge
	ip a add 10.0.0.1/24 dev bocker0
	ip l set bocker0 up
}

function bocker2_network_list() {
	echo "Bridge: "
	ip a show bocker0
	echo ""
	cd $bocker2_path
	for container in * ;do
		ip=$(cat "$container/ip.txt")
		echo -e "$container\t\t$ip"
	done
}

function get_top_pid() {
	uuid="$1"

	if [[ -z "$uuid" ]];then
		echo "Missing container id" >&2
		echo ""
		exit 1
	fi
	[[ "$(bocker2_check "$bocker2_path/$uuid")" == 1 ]] && echo "No container named '$uuid' exists" >&2 && echo "" && exit 1
	cid="$(ps -eo ppid,pid | grep "^\s*$(ps -eo pid,args | grep -E "^\ *[0-9]+ unshare.*$uuid" | awk '{print $1}')" | awk '{print $2}')"
	[[ ! "$cid" =~ ^\ *[0-9]+$ ]] && echo "Container '$uuid' exists but is not running" >&2 && echo "" && exit 1

	echo $cid
}	

function bocker2_signal() {
	uuid="$1"
	signal="SIGTERM"

	if [[ -z "$uuid" ]];then
		echo "Missing container id" >&2
		exit 1
	fi

	if [[ ! -z "$2" ]];then
		signal="$2"
	fi

	top_pid=$(get_top_pid "$uuid")
	if [[ -z "$top_pid" ]];then
		echo "Error getting pid" >&2
		echo $top_pid >&2
		exit 2
	fi

	pid=$(grep PPid /proc/$top_pid/status | awk '{print $2}')
	if [[ -z "$pid" ]];then
		echo "Could not get unshare pid" >&2
		exit 3
	fi	

	echo "Sending signal $signal to $pid"
	kill "-$signal" "$pid"
}

function bocker2_init() {
	imagedir="$1"
	uuid="$2"
	
	[[ "$(bocker2_check "$imagedir")" == 1 ]] && echo "No image named '$imagedir' exists" && exit 1
	[[ "$(bocker2_check "$bocker2_path/$uuid")" == 0 ]] && echo "UUID conflict, retrying..." && bocker_run "$@" && return
	ip="$(echo "${uuid: -3}" | sed 's/0//g')" && mac="${uuid: -3:2}:${uuid: -2}"


	mkdir -p "$bocker2_path/$uuid/root"
	mkdir -p "$bocker2_path/$uuid/workdir"
	mkdir -p "$bocker2_path/$uuid/upper"

	readlink -f "$imagedir" > "$bocker2_path/$uuid/$uuid.base"
	echo "10.0.0.$ip" > "$bocker2_path/$uuid/ip.txt"
	echo "02:42:ac:11:$mac" > "$bocker2_path/$uuid/mac.txt"
}


function bocker2_run() {
	imagedir="$1"
	uuid="ps_$(shuf -i 42002-42254 -n 1)"
	
	bocker2_init "$imagedir" "$uuid"

	bocker2_start "$uuid" ${@:2}

}

function bocker2_start() {
	uuid="$1"
	cmd="${@:2}"
	imagedir=$(cat "$bocker2_path/$uuid/$uuid.base")
	ip=$(cat "$bocker2_path/$uuid/ip.txt")
	mac=$(cat "$bocker2_path/$uuid/mac.txt")

	if [[ -z "$imagedir" || ! -d "$imagedir" ]];then
		echo "Missing image directory" >&2
		exit 1
	fi

	if [[ -z "$uuid" ]];then
		echo "Missing container name" >&2
		exit 2
	fi

	if [[ -z "$cmd" ]];then
		echo "Missing command" >&2
		exit 3
	fi

	ip link add dev veth0_"$uuid" type veth peer name veth1_"$uuid"
	ip link set dev veth0_"$uuid" up
	ip link set veth0_"$uuid" master bocker0
	ip netns add netns_"$uuid"
	ip link set veth1_"$uuid" netns netns_"$uuid"
	ip netns exec netns_"$uuid" ip link set dev lo up
	ip netns exec netns_"$uuid" ip link set veth1_"$uuid" address "$mac"
	ip netns exec netns_"$uuid" ip addr add "$ip"/24 dev veth1_"$uuid"
	ip netns exec netns_"$uuid" ip link set dev veth1_"$uuid" up
	ip netns exec netns_"$uuid" ip route add default via 10.0.0.1
	#btrfs subvolume snapshot "$btrfs_path/$1" "$btrfs_path/$uuid" > /dev/null
	#cgcreate -g "$cgroups:/$uuid"
	#: "${BOCKER_CPU_SHARE:=512}" && cgset -r cpu.shares="$BOCKER_CPU_SHARE" "$uuid"
	#: "${BOCKER_MEM_LIMIT:=512}" && cgset -r memory.limit_in_bytes="$((BOCKER_MEM_LIMIT * 1000000))" "$uuid"

	bocker2_mount "$uuid"
	echo "$cmd" > "$bocker2_path/$uuid/$uuid.cmd"
	#cgexec -g "$cgroups:$uuid" \
	ip netns exec netns_"$uuid" \
	unshare -fmuip --kill-child --mount-proc \
	chroot "$bocker2_path/$uuid/root" \
	/bin/sh -c "/bin/mount -t proc proc /proc && $cmd" \
	2>&1 | tee "$bocker2_path/$uuid/$uuid.log" || true
	ip link del dev veth0_"$uuid"
	ip netns del netns_"$uuid"
	umount $bocker2_path/$uuid/root
}

function bocker2_exec() {
	cid=$(get_top_pid "$1")
	nsenter -t "$cid" -m -u -i -n -p chroot "$bocker2_path/$1/root" "${@:2}"
}

function bocker2_images() {
	echo -e "IMAGE_ID\t\tSOURCE"
	cd $bocker2_path
	for container in *;do
		base=$(cat $container/${container}.base)
		echo -e "$container\t\t$base"
	done
}

function bocker2_help () {
	echo -e "ps\tList containers"
	echo -e "rm\tRemove container"
	echo -e "run\t<image directory> <Command> [Arguments]"
	exit 0
}

[[ -z "${1-}" ]] && bocker2_help "$0"
case $1 in
	check|du|pull|rm|images|ps|run|start|exec|signal|export|import|logs|path|mount|umount|rename) bocker2_"$1" "${@:2}" ;;
	network)
		case $2 in 
			up|list) bocker2_network_"$2" "${@:3}" ;;
			*) bocker2_help "$0" ;;
		esac
	;;
	*) bocker2_help "$0" ;;
esac

